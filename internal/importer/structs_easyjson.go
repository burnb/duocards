// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package importer

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a975c40DecodeGithubComBurnbDuocardInternalImporter(in *jlexer.Lexer, out *Request) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "query":
			out.Query = string(in.String())
		case "variables":
			if m, ok := out.Variables.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Variables.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Variables = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComBurnbDuocardInternalImporter(out *jwriter.Writer, in Request) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix[1:])
		out.String(string(in.Query))
	}
	{
		const prefix string = ",\"variables\":"
		out.RawString(prefix)
		if m, ok := in.Variables.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Variables.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Variables))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Request) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComBurnbDuocardInternalImporter(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Request) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComBurnbDuocardInternalImporter(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Request) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComBurnbDuocardInternalImporter(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Request) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComBurnbDuocardInternalImporter(l, v)
}
func easyjson6a975c40DecodeGithubComBurnbDuocardInternalImporter1(in *jlexer.Lexer, out *CreateCardVariables) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "deckId":
			out.DeckId = string(in.String())
		case "front":
			out.Front = string(in.String())
		case "back":
			out.Back = string(in.String())
		case "langBack":
			out.LangBack = string(in.String())
		case "hint":
			out.Hint = string(in.String())
		case "fromSharing":
			out.FromSharing = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComBurnbDuocardInternalImporter1(out *jwriter.Writer, in CreateCardVariables) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"deckId\":"
		out.RawString(prefix[1:])
		out.String(string(in.DeckId))
	}
	{
		const prefix string = ",\"front\":"
		out.RawString(prefix)
		out.String(string(in.Front))
	}
	{
		const prefix string = ",\"back\":"
		out.RawString(prefix)
		out.String(string(in.Back))
	}
	{
		const prefix string = ",\"langBack\":"
		out.RawString(prefix)
		out.String(string(in.LangBack))
	}
	{
		const prefix string = ",\"hint\":"
		out.RawString(prefix)
		out.String(string(in.Hint))
	}
	{
		const prefix string = ",\"fromSharing\":"
		out.RawString(prefix)
		out.Bool(bool(in.FromSharing))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateCardVariables) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComBurnbDuocardInternalImporter1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateCardVariables) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComBurnbDuocardInternalImporter1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateCardVariables) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComBurnbDuocardInternalImporter1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateCardVariables) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComBurnbDuocardInternalImporter1(l, v)
}
func easyjson6a975c40DecodeGithubComBurnbDuocardInternalImporter2(in *jlexer.Lexer, out *Card) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Front":
			out.Front = string(in.String())
		case "Back":
			out.Back = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComBurnbDuocardInternalImporter2(out *jwriter.Writer, in Card) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Front\":"
		out.RawString(prefix[1:])
		out.String(string(in.Front))
	}
	{
		const prefix string = ",\"Back\":"
		out.RawString(prefix)
		out.String(string(in.Back))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Card) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComBurnbDuocardInternalImporter2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Card) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComBurnbDuocardInternalImporter2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Card) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComBurnbDuocardInternalImporter2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Card) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComBurnbDuocardInternalImporter2(l, v)
}
